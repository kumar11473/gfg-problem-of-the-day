//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++
// 10
// normalization normaligsdj normaisfh norma normref nordfh noresfh
// normla nre dre
// normali

class Solution{
public:
    bool prefixChecker(string str, string temp)
    {
        int n1=str.length(),n2=temp.length();
     //   n1=min(n1,n2);
        if(n2<n1)
            return false;
        for(int i=0;i<n1;i++)
        {
            if(str[i] != temp[i])
                return false;
        }
        return true;
    }
    vector<vector<string>> displayContacts(int n, string contact[], string s)
    {
        // code here
       vector<vector<string>> ans;
         unordered_map<string,int> m;
         for(int i=0;i<n;i++)
         	m[contact[i]];
        int n1=s.length();
        for(int i=0;i<n1;i++)
        {
            vector<string> v;
            string str=s.substr(0,i+1);
            for(auto it=m.begin();it!=m.end();it++)
            {
                string temp=it->first;
                if(prefixChecker(str,temp))
                    v.push_back(temp);
            }
            if(v.size()==0)
                v.push_back("0");
            sort(v.begin(), v.end());
            ans.push_back(v);
            
        }
     //   sort(ans.begin(),ans.end());
        return ans;
    }
};

//{ Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        int n;
        cin>>n;
        string contact[n], s;
        for(int i = 0;i < n;i++)
            cin>>contact[i];
        cin>>s;
        
        Solution ob;
        vector<vector<string>> ans = ob.displayContacts(n, contact, s);
        for(int i = 0;i < s.size();i++){
            for(auto u: ans[i])
                cout<<u<<" ";
            cout<<"\n";
        }
    }
    return 0;
}
// } Driver Code Ends
//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++
// 10
// normalization normaligsdj normaisfh norma normref nordfh noresfh
// normla nre dre
// normali

class Solution{
public:
    bool prefixChecker(string str, string temp)
    {
        int n1=str.length(),n2=temp.length();
     //   n1=min(n1,n2);
        if(n2<n1)
            return false;
        for(int i=0;i<n1;i++)
        {
            if(str[i] != temp[i])
                return false;
        }
        return true;
    }
    vector<vector<string>> displayContacts(int n, string contact[], string s)
    {
        // code here
       vector<vector<string>> ans;
         unordered_map<string,int> m;
         for(int i=0;i<n;i++)
         	m[contact[i]];
        int n1=s.length();
        for(int i=0;i<n1;i++)
        {
            vector<string> v;
            string str=s.substr(0,i+1);
            for(auto it=m.begin();it!=m.end();it++)
            {
                string temp=it->first;
                if(prefixChecker(str,temp))
                    v.push_back(temp);
            }
            if(v.size()==0)
                v.push_back("0");
            sort(v.begin(), v.end());
            ans.push_back(v);
            
        }
     //   sort(ans.begin(),ans.end());
        return ans;
    }
};

//{ Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        int n;
        cin>>n;
        string contact[n], s;
        for(int i = 0;i < n;i++)
            cin>>contact[i];
        cin>>s;
        
        Solution ob;
        vector<vector<string>> ans = ob.displayContacts(n, contact, s);
        for(int i = 0;i < s.size();i++){
            for(auto u: ans[i])
                cout<<u<<" ";
            cout<<"\n";
        }
    }
    return 0;
}
// } Driver Code Ends