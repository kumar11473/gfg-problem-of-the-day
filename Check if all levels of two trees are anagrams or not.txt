link-> https://practice.geeksforgeeks.org/problems/check-if-all-levels-of-two-trees-are-anagrams-or-not/1

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

/* A binary tree node has data, pointer to left child
   and a pointer to right child */
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};
Node* newNode(int val) {
    Node* temp = new Node;
    temp->data = val;
    temp->left = NULL;
    temp->right = NULL;
    return temp;
}
Node* buildTree(string str) {
    // Corner Case
    if (str.length() == 0 || str[0] == 'N') return NULL;

    // Creating vector of strings from input
    // string after spliting by space
    vector<string> ip;

    istringstream iss(str);
    for (string str; iss >> str;) ip.push_back(str);

    // Create the root of the tree
    Node* root = newNode(stoi(ip[0]));

    // Push the root to the queue
    queue<Node*> queue;
    queue.push(root);

    // Starting from the second element
    int i = 1;
    while (!queue.empty() && i < ip.size()) {

        // Get and remove the front of the queue
        Node* currNode = queue.front();
        queue.pop();

        // Get the current node's value from the string
        string currVal = ip[i];

        // If the left child is not null
        if (currVal != "N") {

            // Create the left child for the current node
            currNode->left = newNode(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->left);
        }

        // For the right child
        i++;
        if (i >= ip.size()) break;
        currVal = ip[i];

        // If the right child is not null
        if (currVal != "N") {

            // Create the right child for the current node
            currNode->right = newNode(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }

    return root;
}


// } Driver Code Ends
//User function Template for C++

class Solution{
    public:
    void printlevel(Node*root, vector<vector<int>> &ans)
    {
        vector<int> v;
        if(root==NULL)
            return ;
        queue<Node*> q;
        q.push(root);
        q.push(NULL);
        while(!q.empty())
        {
            Node* node=q.front(); q.pop();
            if(node!=NULL)
            {
                v.push_back(node->data);
             //   cout<<node->data<<" ";
                if(node->left)
                    q.push(node->left);
                if(node->right)
                    q.push(node->right);
                    
            }
            else if(!q.empty())
            {
                q.push(NULL);
               
            }
            if(node==NULL)
            {
                 ans.push_back(v);
                v.clear();
            }   
        }
     // cout<<ans.size()<<" ";
    }
    bool areAnagrams(Node *root1, Node *root2)
    {
        vector<vector<int>> ans1;
        printlevel(root1,ans1);
        
        vector<vector<int>> ans2;
        printlevel(root2,ans2);
        
         int n=ans1.size();   
       //   cout<<n<<" ";
        //  for(int i=0;i<n;i++)
        // {
        //     for(int j=0;j<ans1[i].size();j++)
        //     {
        //         if(ans1[i][j]!= ans2[i][j])
        //         {
        //             cout<<ans1[i][j]<<" ";
                 
        //         }
                    
        //     }
        // }
        
        if(ans1.size() != ans2.size())
            return false;
       
        for(int i=0;i<n;i++)
        {
            if(ans1[i].size() == ans2[i].size())
            {
                sort(ans1[i].begin(),ans1[i].end());
                sort(ans2[i].begin(),ans2[i].end());
            }
            else
                return false;
        }
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<ans1[i].size();j++)
            {
                if(ans1[i][j]!= ans2[i][j])
                {
                   // cout<<ans1[i][j]<<" "<<ans2[i][j];
                    return false;
                }
                    
            }
        }
        
        return true;
        
    }
};

//{ Driver Code Starts.

/* Driver program to test size function*/
int main() {
    int t;
    scanf("%d\n", &t);
    while (t--) {
        string treeString1, treeString2;
        getline(cin, treeString1);
        Node *root1 = buildTree(treeString1);
        getline(cin, treeString2);
        Node *root2 = buildTree(treeString2);
        Solution ob;
        cout << ob.areAnagrams(root1, root2) << endl;
    }
    return 0;
}

// } Driver Code Ends