You are given a n,m which means the row and column of the 2D matrix and an array of  size k denoting the number of operations. Matrix elements is 0 if there is water or 1 if there is land. 
Originally, the 2D matrix is all 0 which means there is no land in the matrix. The array has k operator and each operator has two integer A[i][0], A[i][1] means that you can change the cell matrix[A[i][0]][A[i][1]] from sea to island.
 Return how many island are there in the matrix after each operator.
You need to return an array of size k.

link -> https://practice.geeksforgeeks.org/problems/number-of-islands/1


//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++
class Solution {
  public:
        int find(int x,int parent[])
        {
        if(parent[x]==-1)return x;
        return parent[x]=find(parent[x],parent);
      }
      
    int unionf(int x,int y,int parent[])
    {
        int p1=find(x,parent);
        int p2=find(y,parent);
        if(p1!=p2){
            parent[p1]=p2;
            return -1;
        }
        else{
            return 0;
        }
    }
    
    bool isSafe(int i,int j,int n,int m)
    {
        if(i>=0&&j>=0&&i<n&&j<m)return true;
            return false;
    }
       
    vector<int> numOfIslands(int n, int m, vector<vector<int>> &operators) {
        // code here
        vector<vector<int>>v(n,vector<int>(m,0));
        int parent[n*m];
        memset(parent,-1,sizeof(parent));
        int ans=0;
        vector<int>res;
        for(int i=0;i<operators.size();i++){
            int x=operators[i][0],y=operators[i][1];
            if(v[x][y]==1){
                res.push_back(ans);
                continue;
            }
            v[x][y]=1;
            ans++;
            int dx[]={0,1,0,-1};
            int dy[]={1,0,-1,0};
            for(int j=0;j<4;j++){
                if(isSafe(x+dx[j],y+dy[j],n,m)&&v[x+dx[j]][y+dy[j]]==1){
                    ans+=unionf((x+dx[j])*m+y+dy[j],x*m+y,parent);
                }
            }
            res.push_back(ans);
        }
        return res;
    
 
        
    }
};


//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n,m,k; cin>>n>>m>>k;
        vector<vector<int>> a;
        
        for(int i=0; i<k; i++){
            vector<int> temp;
            for(int j=0; j<2; j++){
                int x; cin>>x;
                temp.push_back(x);
            }
            a.push_back(temp);
        }
    
        Solution obj;
        vector<int> res = obj.numOfIslands(n,m,a);
        
        for(auto x : res)cout<<x<<" ";
        cout<<"\n";
    }
}

// } Driver Code Ends